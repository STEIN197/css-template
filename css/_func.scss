@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use 'modules';

$breakpoints: (
	sm: 576px,
	md: 768px,
	lg: 992px,
	xl: 1200px
);

@function to-str($string) {
	@return inspect($string);
}

@function selector-escape($string) {
	$string: to-str($string);
	$escaped-characters:
		':',
		'.',
		'#';
	$result: '';
	@each $char in str-to-list($string) {
		@if list-contains($escaped-characters, $char) {
			$result: $result + "\\" + $char;
		} @else {
			$result: $result + $char;
		}
	}
	@return $result;
}

@function list-contains($list, $value) {
	@return list.index($list, $value) != null;
}

@function str-contains($string, $char) {
	@return str-index($string, $char) != null;
}

@function str-to-list($string) {
	$string: to-str($string);
	$result: ();
	$len: string.length($string);
	@for $i from 1 through $len {
		$char: string.slice($string, $i, $i);
		$result: list.append($result, $char);
	}
	@return $result;
}

@function module-enabled($module-name) {
	$module-name: to-lower-case($module-name);
	$is-submodule: str-contains($module-name, ".");
	@if $is-submodule {
		@return map.get(modules.$sub-modules, $module-name) == true;
	} @else {
		@return map.get(modules.$modules, $module-name) == true;
	}
}

@function range-create-from-borders($min, $max, $step) {
	$result: ();
	$value: $min;
	@while $value <= $max {
		$result: list.append($result, $value);
		$value: $value + $step;
	}
	@return $result;
}

@mixin rule-create-from-map($prefix, $property, $map, $use-media: false) {
	@each $key, $value in $map {
		.#{$prefix}-#{$key} {
			#{$property}: $value;
		}
	}
	@if $use-media {
		@each $bp-key, $bp-value in $breakpoints {
			@include media-query($bp-key) {
				@each $key, $value in $map {
					.#{$prefix}-#{$bp-key}-#{$key} {
						#{$property}: $value;
					}
				}
			}
		}
	}
}

@mixin media-query($width) {
	@if map_has_key($breakpoints, $width) {
		$width: map_get($breakpoints, $width);
		@media (min-width: $width) {
			@content;
		}
	} @else {
		@error "There is no breakpoint with $width name";
	}
}
